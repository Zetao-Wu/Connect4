// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Connect4$GameProject = require("./Connect4.bs.js");
var CS17SetupGame$GameProject = require("./CS17SetupGame.bs.js");

function AIPlayer(Connect4) {
  var minimax = function (state, depth) {
    if (depth === 0) {
      return Curry._1(Connect4.estimateValue, state);
    }
    var match = Curry._1(Connect4.gameStatus, state);
    if (typeof match === "number") {
      return 0.0;
    }
    if (match.TAG === /* Win */0) {
      if (match._0) {
        return Pervasives.infinity * -1;
      } else {
        return Pervasives.infinity;
      }
    }
    if (match._0) {
      var z = List.map((function (x) {
              return minimax(x, depth - 1 | 0);
            }), List.map((function (y) {
                  return Curry._2(Connect4.nextState, state, y);
                }), Curry._1(Connect4.legalMoves, state)));
      var _alon = z;
      var _currentMin = List.hd(z);
      var _n = List.length(z);
      while(true) {
        var n = _n;
        var currentMin = _currentMin;
        var alon = _alon;
        if (n === 0) {
          return currentMin;
        }
        if (List.hd(alon) < currentMin) {
          _n = n - 1 | 0;
          _currentMin = List.hd(alon);
          _alon = List.tl(alon);
          continue ;
        }
        _n = n - 1 | 0;
        _alon = List.tl(alon);
        continue ;
      };
    }
    var z$1 = List.map((function (x) {
            return minimax(x, depth - 1 | 0);
          }), List.map((function (y) {
                return Curry._2(Connect4.nextState, state, y);
              }), Curry._1(Connect4.legalMoves, state)));
    var _alon$1 = z$1;
    var _currentMax = List.hd(z$1);
    var _n$1 = List.length(z$1);
    while(true) {
      var n$1 = _n$1;
      var currentMax = _currentMax;
      var alon$1 = _alon$1;
      if (n$1 === 0) {
        return currentMax;
      }
      if (List.hd(alon$1) > currentMax) {
        _n$1 = n$1 - 1 | 0;
        _currentMax = List.hd(alon$1);
        _alon$1 = List.tl(alon$1);
        continue ;
      }
      _n$1 = n$1 - 1 | 0;
      _alon$1 = List.tl(alon$1);
      continue ;
    };
  };
  var getMove = function (_x, _y, _count, _currentMove, _currentValue, player) {
    while(true) {
      var currentValue = _currentValue;
      var currentMove = _currentMove;
      var count = _count;
      var y = _y;
      var x = _x;
      if (count === 0) {
        return currentMove;
      }
      var match = player === "P1" ? (
          List.hd(y) > currentValue ? [
              List.hd(x),
              List.hd(y)
            ] : [
              currentMove,
              currentValue
            ]
        ) : (
          List.hd(y) < currentValue ? [
              List.hd(x),
              List.hd(y)
            ] : [
              currentMove,
              currentValue
            ]
        );
      _currentValue = match[1];
      _currentMove = match[0];
      _count = count - 1 | 0;
      _y = List.tl(y);
      _x = List.tl(x);
      continue ;
    };
  };
  var nextMove = function (s) {
    var match = Curry._1(Connect4.legalMoves, s);
    if (!match) {
      return Pervasives.failwith("no available moves");
    }
    var tl = match.tl;
    var hd = match.hd;
    var evaluationScores = List.map((function (move) {
            return minimax(Curry._2(Connect4.nextState, s, move), 3);
          }), {
          hd: hd,
          tl: tl
        });
    var match$1 = Curry._1(Connect4.gameStatus, s);
    if (typeof match$1 === "number" || match$1.TAG === /* Win */0) {
      return Pervasives.failwith("no available moves");
    } else if (match$1._0) {
      return getMove({
                  hd: hd,
                  tl: tl
                }, evaluationScores, List.length({
                      hd: hd,
                      tl: tl
                    }), List.hd({
                      hd: hd,
                      tl: tl
                    }), List.hd(evaluationScores), "P2");
    } else {
      return getMove({
                  hd: hd,
                  tl: tl
                }, evaluationScores, List.length({
                      hd: hd,
                      tl: tl
                    }), List.hd({
                      hd: hd,
                      tl: tl
                    }), List.hd(evaluationScores), "P1");
    }
  };
  return {
          PlayerGame: Connect4,
          minimax: minimax,
          getMove: getMove,
          nextMove: nextMove,
          playerName: "marlon"
        };
}

var Connect4_stringOfPlayer = Connect4$GameProject.Connect4.stringOfPlayer;

var Connect4_stringOfState = Connect4$GameProject.Connect4.stringOfState;

var Connect4_stringOfMove = Connect4$GameProject.Connect4.stringOfMove;

var Connect4_initialState = Connect4$GameProject.Connect4.initialState;

var Connect4_legalMoves = Connect4$GameProject.Connect4.legalMoves;

var Connect4_currentPlayer = Connect4$GameProject.Connect4.currentPlayer;

var Connect4_gameStatus = Connect4$GameProject.Connect4.gameStatus;

var Connect4_nextState = Connect4$GameProject.Connect4.nextState;

var Connect4_moveOfString = Connect4$GameProject.Connect4.moveOfString;

var Connect4_estimateValue = Connect4$GameProject.Connect4.estimateValue;

var Connect4 = {
  stringOfPlayer: Connect4_stringOfPlayer,
  stringOfState: Connect4_stringOfState,
  stringOfMove: Connect4_stringOfMove,
  initialState: Connect4_initialState,
  legalMoves: Connect4_legalMoves,
  currentPlayer: Connect4_currentPlayer,
  gameStatus: Connect4_gameStatus,
  nextState: Connect4_nextState,
  moveOfString: Connect4_moveOfString,
  estimateValue: Connect4_estimateValue
};

function minimax(state, depth) {
  if (depth === 0) {
    return Curry._1(Connect4$GameProject.Connect4.estimateValue, state);
  }
  var match = Curry._1(Connect4$GameProject.Connect4.gameStatus, state);
  if (typeof match === "number") {
    return 0.0;
  }
  if (match.TAG === /* Win */0) {
    if (match._0) {
      return Pervasives.infinity * -1;
    } else {
      return Pervasives.infinity;
    }
  }
  if (match._0) {
    var z = List.map((function (x) {
            return minimax(x, depth - 1 | 0);
          }), List.map((function (y) {
                return Curry._2(Connect4$GameProject.Connect4.nextState, state, y);
              }), Curry._1(Connect4$GameProject.Connect4.legalMoves, state)));
    var _alon = z;
    var _currentMin = List.hd(z);
    var _n = List.length(z);
    while(true) {
      var n = _n;
      var currentMin = _currentMin;
      var alon = _alon;
      if (n === 0) {
        return currentMin;
      }
      if (List.hd(alon) < currentMin) {
        _n = n - 1 | 0;
        _currentMin = List.hd(alon);
        _alon = List.tl(alon);
        continue ;
      }
      _n = n - 1 | 0;
      _alon = List.tl(alon);
      continue ;
    };
  }
  var z$1 = List.map((function (x) {
          return minimax(x, depth - 1 | 0);
        }), List.map((function (y) {
              return Curry._2(Connect4$GameProject.Connect4.nextState, state, y);
            }), Curry._1(Connect4$GameProject.Connect4.legalMoves, state)));
  var _alon$1 = z$1;
  var _currentMax = List.hd(z$1);
  var _n$1 = List.length(z$1);
  while(true) {
    var n$1 = _n$1;
    var currentMax = _currentMax;
    var alon$1 = _alon$1;
    if (n$1 === 0) {
      return currentMax;
    }
    if (List.hd(alon$1) > currentMax) {
      _n$1 = n$1 - 1 | 0;
      _currentMax = List.hd(alon$1);
      _alon$1 = List.tl(alon$1);
      continue ;
    }
    _n$1 = n$1 - 1 | 0;
    _alon$1 = List.tl(alon$1);
    continue ;
  };
}

function getMove(_x, _y, _count, _currentMove, _currentValue, player) {
  while(true) {
    var currentValue = _currentValue;
    var currentMove = _currentMove;
    var count = _count;
    var y = _y;
    var x = _x;
    if (count === 0) {
      return currentMove;
    }
    var match = player === "P1" ? (
        List.hd(y) > currentValue ? [
            List.hd(x),
            List.hd(y)
          ] : [
            currentMove,
            currentValue
          ]
      ) : (
        List.hd(y) < currentValue ? [
            List.hd(x),
            List.hd(y)
          ] : [
            currentMove,
            currentValue
          ]
      );
    _currentValue = match[1];
    _currentMove = match[0];
    _count = count - 1 | 0;
    _y = List.tl(y);
    _x = List.tl(x);
    continue ;
  };
}

function nextMove(s) {
  var match = Curry._1(Connect4$GameProject.Connect4.legalMoves, s);
  if (!match) {
    return Pervasives.failwith("no available moves");
  }
  var tl = match.tl;
  var hd = match.hd;
  var evaluationScores = List.map((function (move) {
          return minimax(Curry._2(Connect4$GameProject.Connect4.nextState, s, move), 3);
        }), {
        hd: hd,
        tl: tl
      });
  var match$1 = Curry._1(Connect4$GameProject.Connect4.gameStatus, s);
  if (typeof match$1 === "number" || match$1.TAG === /* Win */0) {
    return Pervasives.failwith("no available moves");
  } else if (match$1._0) {
    return getMove({
                hd: hd,
                tl: tl
              }, evaluationScores, List.length({
                    hd: hd,
                    tl: tl
                  }), List.hd({
                    hd: hd,
                    tl: tl
                  }), List.hd(evaluationScores), "P2");
  } else {
    return getMove({
                hd: hd,
                tl: tl
              }, evaluationScores, List.length({
                    hd: hd,
                    tl: tl
                  }), List.hd({
                    hd: hd,
                    tl: tl
                  }), List.hd(evaluationScores), "P1");
  }
}

var playerName = "marlon";

var TestAIPlayer = {
  PlayerGame: Connect4,
  minimax: minimax,
  getMove: getMove,
  nextMove: nextMove,
  playerName: playerName
};

CS17SetupGame$GameProject.checkExpect(minimax(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }, 3), Pervasives.infinity, "Minimax");

CS17SetupGame$GameProject.checkExpect(minimax(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }, 3), Pervasives.infinity * -1, "Minimax");

var TestGame;

var MyAIPlayer = {
  PlayerGame: Connect4,
  nextMove: nextMove,
  playerName: playerName
};

exports.AIPlayer = AIPlayer;
exports.TestGame = TestGame;
exports.TestAIPlayer = TestAIPlayer;
exports.MyAIPlayer = MyAIPlayer;
/*  Not a pure module */
