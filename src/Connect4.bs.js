// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CS17SetupGame$GameProject = require("./CS17SetupGame.bs.js");

function createCol(n) {
  if (n !== 0) {
    return {
            hd: 0,
            tl: createCol(n - 1 | 0)
          };
  } else {
    return /* [] */0;
  }
}

function createBoard(height, width) {
  if (width !== 0) {
    return {
            hd: createCol(height),
            tl: createBoard(height, width - 1 | 0)
          };
  } else {
    return /* [] */0;
  }
}

function initialState(s) {
  var boardDims = CS17SetupGame$GameProject.parseBoardDims(s);
  var boardHeight = CS17SetupGame$GameProject.getBoardHeight(boardDims);
  var boardWidth = CS17SetupGame$GameProject.getBoardWidth(boardDims);
  return /* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: createBoard(boardHeight, boardWidth)
        };
}

function stringOfPlayer(player) {
  if (player === /* P1 */0) {
    return "P1";
  } else {
    return "P2";
  }
}

function rowFlip(matrix) {
  return List.map(List.rev, matrix);
}

var columnFlip = List.rev;

function transpose(matrix) {
  if (!matrix) {
    return /* [] */0;
  }
  var match = matrix.hd;
  if (match) {
    if (match.tl) {
      return {
              hd: List.map(List.hd, matrix),
              tl: transpose(List.map(List.tl, matrix))
            };
    } else {
      return {
              hd: List.flatten(matrix),
              tl: /* [] */0
            };
    }
  } else {
    return /* [] */0;
  }
}

function transposeOfState(inState) {
  return /* State */{
          _0: inState._0,
          _1: List.rev(transpose(inState._1))
        };
}

function stringOfStateHelper(inState) {
  var match = inState._1;
  if (!match) {
    return "";
  }
  var match$1 = match.hd;
  var a = inState._0;
  if (match$1) {
    return " | " + (String(match$1.hd) + (stringOfStateHelper(/* State */{
                    _0: a,
                    _1: {
                      hd: match$1.tl,
                      tl: /* [] */0
                    }
                  }) + stringOfStateHelper(/* State */{
                    _0: a,
                    _1: match.tl
                  })));
  } else {
    return " | \n" + stringOfStateHelper(/* State */{
                _0: a,
                _1: match.tl
              });
  }
}

function stringOfState(inState) {
  return stringOfStateHelper(transposeOfState(inState));
}

function stringOfMove(inMove) {
  return "puts a piece in column " + String(inMove._0);
}

function legalMoveHelper2(_column) {
  while(true) {
    var column = _column;
    if (!column) {
      return false;
    }
    var tl = column.tl;
    if (!tl) {
      return column.hd === 0;
    }
    _column = tl;
    continue ;
  };
}

function legalMoveHelper(_lst, _n) {
  while(true) {
    var n = _n;
    var lst = _lst;
    if (!lst) {
      return /* [] */0;
    }
    var tl = lst.tl;
    if (legalMoveHelper2(lst.hd) === true) {
      return {
              hd: /* Move */{
                _0: n
              },
              tl: legalMoveHelper(tl, n + 1 | 0)
            };
    }
    _n = n + 1 | 0;
    _lst = tl;
    continue ;
  };
}

function legalMoves(inState) {
  return legalMoveHelper(inState._1, 1);
}

function gameStatus(inState) {
  return inState._0;
}

function otherPlayer(player) {
  if (player) {
    return /* P1 */0;
  } else {
    return /* P2 */1;
  }
}

function nextMoveColumn(_board, _move) {
  while(true) {
    var move = _move;
    var board = _board;
    if (!board) {
      return Pervasives.failwith("The board has no dimensions.");
    }
    var n = move._0;
    if (n === 1) {
      return board.hd;
    }
    _move = /* Move */{
      _0: n - 1 | 0
    };
    _board = board.tl;
    continue ;
  };
}

function afterColumn(_board, _move) {
  while(true) {
    var move = _move;
    var board = _board;
    if (!board) {
      return Pervasives.failwith("The board has no dimensions.");
    }
    var n = move._0;
    var tl = board.tl;
    if (n === 1) {
      return tl;
    }
    _move = /* Move */{
      _0: n - 1 | 0
    };
    _board = tl;
    continue ;
  };
}

function beforeColumn(board, move) {
  if (!board) {
    return Pervasives.failwith("a");
  }
  var n = move._0;
  var hd = board.hd;
  if (n !== 1) {
    if (n !== 2) {
      return {
              hd: hd,
              tl: beforeColumn(board.tl, /* Move */{
                    _0: n - 1 | 0
                  })
            };
    } else {
      return {
              hd: hd,
              tl: /* [] */0
            };
    }
  } else {
    return /* [] */0;
  }
}

function nextMoveP1(column, move) {
  if (!column) {
    return Pervasives.failwith("The column is already full, not a legal move.");
  }
  var tl = column.tl;
  var hd = column.hd;
  if (hd === 0) {
    return {
            hd: 1,
            tl: tl
          };
  } else {
    return {
            hd: hd,
            tl: nextMoveP1(tl, move)
          };
  }
}

function nextMoveP2(column, move) {
  if (!column) {
    return Pervasives.failwith("a");
  }
  var tl = column.tl;
  var hd = column.hd;
  if (hd === 0) {
    return {
            hd: 2,
            tl: tl
          };
  } else {
    return {
            hd: hd,
            tl: nextMoveP2(tl, move)
          };
  }
}

function combinedNextMove(state, move) {
  var player = state._0;
  if (typeof player === "number") {
    return Pervasives.failwith("The game is already over.");
  }
  if (player.TAG === /* Win */0) {
    return Pervasives.failwith("The game is already over.");
  }
  var board = state._1;
  var changedColumnP1 = nextMoveP1(nextMoveColumn(board, move), move);
  var changedColumnP2 = nextMoveP2(nextMoveColumn(board, move), move);
  var beforeColumn$1 = beforeColumn(board, move);
  var afterColumn$1 = afterColumn(board, move);
  if (player._0 === /* P1 */0) {
    return List.append(List.append(beforeColumn$1, {
                    hd: changedColumnP1,
                    tl: /* [] */0
                  }), afterColumn$1);
  } else {
    return List.append(List.append(beforeColumn$1, {
                    hd: changedColumnP2,
                    tl: /* [] */0
                  }), afterColumn$1);
  }
}

function findDiagonal(board) {
  if (!board) {
    return /* [] */0;
  }
  var hd = board.hd;
  if (hd) {
    return {
            hd: hd.hd,
            tl: findDiagonal(List.map(List.tl, board.tl))
          };
  } else {
    return /* [] */0;
  }
}

function findDiagonal2(board) {
  if (!board) {
    return /* [] */0;
  }
  var restDiagonals = findDiagonal2(board.tl);
  return {
          hd: findDiagonal(board),
          tl: restDiagonals
        };
}

function allDiagonals1(board) {
  var matrix = transpose(List.rev(board));
  return List.append(findDiagonal2(board), findDiagonal2(List.map(List.rev, matrix)));
}

function allDiagonals2(board) {
  var matrix = transpose(board);
  return List.append(findDiagonal2(List.rev(board)), findDiagonal2(List.map(List.rev, matrix)));
}

function allDiagonal(board) {
  return List.append(allDiagonals1(board), allDiagonals2(board));
}

function removeDuplicate(_diagonals) {
  while(true) {
    var diagonals = _diagonals;
    if (!diagonals) {
      return /* [] */0;
    }
    var tl = diagonals.tl;
    var hd = diagonals.hd;
    if (!List.mem(hd, tl)) {
      return {
              hd: hd,
              tl: removeDuplicate(tl)
            };
    }
    _diagonals = tl;
    continue ;
  };
}

function allDiagonalFinal(board) {
  return removeDuplicate(allDiagonal(board));
}

function check(_column) {
  while(true) {
    var column = _column;
    if (!column) {
      return false;
    }
    var match = column.hd;
    if (match !== 1) {
      if (match !== 2) {
        _column = column.tl;
        continue ;
      }
      var match$1 = column.tl;
      if (match$1) {
        if (match$1.hd !== 2) {
          _column = column.tl;
          continue ;
        }
        var match$2 = match$1.tl;
        if (match$2) {
          if (match$2.hd !== 2) {
            _column = column.tl;
            continue ;
          }
          var match$3 = match$2.tl;
          if (match$3) {
            if (match$3.hd === 2) {
              return true;
            }
            _column = column.tl;
            continue ;
          }
          _column = column.tl;
          continue ;
        }
        _column = column.tl;
        continue ;
      }
      _column = column.tl;
      continue ;
    }
    var match$4 = column.tl;
    if (match$4) {
      if (match$4.hd !== 1) {
        _column = column.tl;
        continue ;
      }
      var match$5 = match$4.tl;
      if (match$5) {
        if (match$5.hd !== 1) {
          _column = column.tl;
          continue ;
        }
        var match$6 = match$5.tl;
        if (match$6) {
          if (match$6.hd === 1) {
            return true;
          }
          _column = column.tl;
          continue ;
        }
        _column = column.tl;
        continue ;
      }
      _column = column.tl;
      continue ;
    }
    _column = column.tl;
    continue ;
  };
}

function columnCheck(board) {
  return List.map(check, board);
}

function rowCheck(board) {
  return List.map(check, transpose(board));
}

function diagonalCheck(board) {
  return List.map(check, removeDuplicate(allDiagonal(board)));
}

function combinedCheck(board) {
  return List.append(List.append(List.map(check, board), List.map(check, transpose(board))), List.map(check, removeDuplicate(allDiagonal(board))));
}

function isEmpty(alod) {
  if (alod) {
    return false;
  } else {
    return true;
  }
}

function winCheck(state) {
  var a = state._0;
  if (typeof a === "number") {
    return /* State */{
            _0: /* Draw */0,
            _1: state._1
          };
  }
  if (a.TAG === /* Win */0) {
    return /* State */{
            _0: {
              TAG: /* Win */0,
              _0: a._0
            },
            _1: state._1
          };
  }
  var board = state._1;
  var player = a._0;
  var checkResult = combinedCheck(board);
  if (List.mem(true, checkResult)) {
    return /* State */{
            _0: {
              TAG: /* Win */0,
              _0: player
            },
            _1: board
          };
  } else if (isEmpty(legalMoves(state))) {
    return /* State */{
            _0: /* Draw */0,
            _1: board
          };
  } else {
    return /* State */{
            _0: {
              TAG: /* Ongoing */1,
              _0: player ? /* P1 */0 : /* P2 */1
            },
            _1: board
          };
  }
}

function nextState(s, m) {
  var player = s._0;
  if (typeof player === "number") {
    return Pervasives.failwith("The game is already over.");
  }
  if (player.TAG === /* Win */0) {
    return Pervasives.failwith("The game is already over.");
  }
  var player$1 = player._0;
  return winCheck(/* State */{
              _0: {
                TAG: /* Ongoing */1,
                _0: player$1
              },
              _1: combinedNextMove(/* State */{
                    _0: {
                      TAG: /* Ongoing */1,
                      _0: player$1
                    },
                    _1: s._1
                  }, m)
            });
}

function moveOfStringHelper(lst) {
  if (lst) {
    return {
            hd: lst.hd._0,
            tl: moveOfStringHelper(lst.tl)
          };
  } else {
    return /* [] */0;
  }
}

function moveOfString(str, inState) {
  if (List.mem(Caml_format.caml_int_of_string(str), moveOfStringHelper(legalMoves(inState)))) {
    return /* Move */{
            _0: Caml_format.caml_int_of_string(str)
          };
  } else {
    return Pervasives.failwith("This column is full, please pick another column.");
  }
}

function threeInARowCheck(_column) {
  while(true) {
    var column = _column;
    if (!column) {
      return 0;
    }
    var match = column.hd;
    if (match !== 1) {
      if (match !== 2) {
        _column = column.tl;
        continue ;
      }
      var match$1 = column.tl;
      if (match$1) {
        if (match$1.hd !== 2) {
          _column = column.tl;
          continue ;
        }
        var match$2 = match$1.tl;
        if (match$2) {
          if (match$2.hd === 2) {
            return -1;
          }
          _column = column.tl;
          continue ;
        }
        _column = column.tl;
        continue ;
      }
      _column = column.tl;
      continue ;
    }
    var match$3 = column.tl;
    if (match$3) {
      if (match$3.hd !== 1) {
        _column = column.tl;
        continue ;
      }
      var match$4 = match$3.tl;
      if (match$4) {
        if (match$4.hd === 1) {
          return 1;
        }
        _column = column.tl;
        continue ;
      }
      _column = column.tl;
      continue ;
    }
    _column = column.tl;
    continue ;
  };
}

function columnCheck3(board) {
  return List.map(threeInARowCheck, board);
}

function rowCheck3(board) {
  return List.map(threeInARowCheck, transpose(board));
}

function diagonalCheck3(board) {
  return List.map(threeInARowCheck, removeDuplicate(allDiagonal(board)));
}

function combinedCheck3(board) {
  return List.append(List.append(List.map(threeInARowCheck, board), List.map(threeInARowCheck, transpose(board))), List.map(threeInARowCheck, removeDuplicate(allDiagonal(board))));
}

function tripleScore(_score) {
  while(true) {
    var score = _score;
    if (!score) {
      return 0;
    }
    switch (score.hd) {
      case -1 :
          return -0.2 + tripleScore(score.tl);
      case 0 :
          _score = score.tl;
          continue ;
      case 1 :
          return 0.2 + tripleScore(score.tl);
      default:
        _score = score.tl;
        continue ;
    }
  };
}

function twoInARowCheck(_column) {
  while(true) {
    var column = _column;
    if (!column) {
      return 0;
    }
    var match = column.hd;
    if (match !== 1) {
      if (match !== 2) {
        _column = column.tl;
        continue ;
      }
      var match$1 = column.tl;
      if (match$1) {
        if (match$1.hd === 2) {
          return -1;
        }
        _column = column.tl;
        continue ;
      }
      _column = column.tl;
      continue ;
    }
    var match$2 = column.tl;
    if (match$2) {
      if (match$2.hd === 1) {
        return 1;
      }
      _column = column.tl;
      continue ;
    }
    _column = column.tl;
    continue ;
  };
}

function columnCheck2(board) {
  return List.map(twoInARowCheck, board);
}

function rowCheck2(board) {
  return List.map(twoInARowCheck, transpose(board));
}

function diagonalCheck2(board) {
  return List.map(twoInARowCheck, removeDuplicate(allDiagonal(board)));
}

function combinedCheck2(board) {
  return List.append(List.append(List.map(twoInARowCheck, board), List.map(twoInARowCheck, transpose(board))), List.map(twoInARowCheck, removeDuplicate(allDiagonal(board))));
}

function doubleScore(_score) {
  while(true) {
    var score = _score;
    if (!score) {
      return 0;
    }
    switch (score.hd) {
      case -1 :
          return -0.005 + doubleScore(score.tl);
      case 0 :
          _score = score.tl;
          continue ;
      case 1 :
          return 0.005 + doubleScore(score.tl);
      default:
        _score = score.tl;
        continue ;
    }
  };
}

function bothScore(board) {
  return doubleScore(combinedCheck2(board)) + tripleScore(combinedCheck3(board));
}

function estimateValue(inState) {
  var match = inState._0;
  if (typeof match === "number") {
    return 0;
  } else if (match.TAG === /* Win */0) {
    if (match._0) {
      return -1;
    } else {
      return 1;
    }
  } else {
    return bothScore(inState._1);
  }
}

var Connect4 = {
  createCol: createCol,
  createBoard: createBoard,
  initialState: initialState,
  stringOfPlayer: stringOfPlayer,
  rowFlip: rowFlip,
  columnFlip: columnFlip,
  transpose: transpose,
  transposeOfState: transposeOfState,
  stringOfStateHelper: stringOfStateHelper,
  stringOfState: stringOfState,
  stringOfMove: stringOfMove,
  legalMoveHelper2: legalMoveHelper2,
  legalMoveHelper: legalMoveHelper,
  legalMoves: legalMoves,
  gameStatus: gameStatus,
  otherPlayer: otherPlayer,
  nextMoveColumn: nextMoveColumn,
  afterColumn: afterColumn,
  beforeColumn: beforeColumn,
  nextMoveP1: nextMoveP1,
  nextMoveP2: nextMoveP2,
  combinedNextMove: combinedNextMove,
  findDiagonal: findDiagonal,
  findDiagonal2: findDiagonal2,
  allDiagonals1: allDiagonals1,
  allDiagonals2: allDiagonals2,
  allDiagonal: allDiagonal,
  removeDuplicate: removeDuplicate,
  allDiagonalFinal: allDiagonalFinal,
  check: check,
  columnCheck: columnCheck,
  rowCheck: rowCheck,
  diagonalCheck: diagonalCheck,
  combinedCheck: combinedCheck,
  isEmpty: isEmpty,
  winCheck: winCheck,
  nextState: nextState,
  moveOfStringHelper: moveOfStringHelper,
  moveOfString: moveOfString,
  threeInARowCheck: threeInARowCheck,
  columnCheck3: columnCheck3,
  rowCheck3: rowCheck3,
  diagonalCheck3: diagonalCheck3,
  combinedCheck3: combinedCheck3,
  tripleScore: tripleScore,
  twoInARowCheck: twoInARowCheck,
  columnCheck2: columnCheck2,
  rowCheck2: rowCheck2,
  diagonalCheck2: diagonalCheck2,
  combinedCheck2: combinedCheck2,
  doubleScore: doubleScore,
  bothScore: bothScore,
  estimateValue: estimateValue
};

CS17SetupGame$GameProject.checkExpect(createCol(0), /* [] */0, "create a column of 0s of length 0");

CS17SetupGame$GameProject.checkExpect(createCol(4), {
      hd: 0,
      tl: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 0,
            tl: /* [] */0
          }
        }
      }
    }, "create a column of 0s of length 4");

CS17SetupGame$GameProject.checkExpect(createBoard(5, 0), /* [] */0, "create a 5 x 0 board of 0s");

CS17SetupGame$GameProject.checkExpect(createBoard(5, 7), {
      hd: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 0,
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }
      }
    }, "create a 5 x 7 board of 0s");

CS17SetupGame$GameProject.checkExpect(initialState("5 7"), /* State */{
      _0: {
        TAG: /* Ongoing */1,
        _0: /* P1 */0
      },
      _1: {
        hd: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 0,
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  },
                  tl: {
                    hd: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 0,
                            tl: {
                              hd: 0,
                              tl: /* [] */0
                            }
                          }
                        }
                      }
                    },
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }, "initial state of a 5 x 7 board");

CS17SetupGame$GameProject.checkExpect("P1", "P1", "string of P1");

CS17SetupGame$GameProject.checkExpect("P2", "P2", "string of P2");

CS17SetupGame$GameProject.checkExpect(List.map(List.rev, {
          hd: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 3,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }), {
      hd: {
        hd: 3,
        tl: {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }
      },
      tl: /* [] */0
    }, "rowFlip of a 1 x 3 board with random unofficial values");

CS17SetupGame$GameProject.checkExpect(List.map(List.rev, {
          hd: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 3,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: 4,
              tl: {
                hd: 5,
                tl: {
                  hd: 6,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 7,
                tl: {
                  hd: 8,
                  tl: {
                    hd: 9,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: 3,
        tl: {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: 6,
          tl: {
            hd: 5,
            tl: {
              hd: 4,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: 9,
            tl: {
              hd: 8,
              tl: {
                hd: 7,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "rowFlip of a 3 x 3 board with random unofficial values");

CS17SetupGame$GameProject.checkExpect(List.rev({
          hd: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 3,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }), {
      hd: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      tl: /* [] */0
    }, "columnFlip of a 1 x 3 board with random unofficial values");

CS17SetupGame$GameProject.checkExpect(List.rev({
          hd: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 3,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: 4,
              tl: {
                hd: 5,
                tl: {
                  hd: 6,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 7,
                tl: {
                  hd: 8,
                  tl: {
                    hd: 9,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: 7,
        tl: {
          hd: 8,
          tl: {
            hd: 9,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: 4,
          tl: {
            hd: 5,
            tl: {
              hd: 6,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 3,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "columnFlip of a 3 x 3 board with random unofficial values");

CS17SetupGame$GameProject.checkExpect(transpose({
          hd: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 3,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }), {
      hd: {
        hd: 1,
        tl: /* [] */0
      },
      tl: {
        hd: {
          hd: 2,
          tl: /* [] */0
        },
        tl: {
          hd: {
            hd: 3,
            tl: /* [] */0
          },
          tl: /* [] */0
        }
      }
    }, "transpose of a 1 x 3 board with random unofficial values");

CS17SetupGame$GameProject.checkExpect(transpose({
          hd: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 3,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: 4,
              tl: {
                hd: 5,
                tl: {
                  hd: 6,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 7,
                tl: {
                  hd: 8,
                  tl: {
                    hd: 9,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: 1,
        tl: {
          hd: 4,
          tl: {
            hd: 7,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: 2,
          tl: {
            hd: 5,
            tl: {
              hd: 8,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: 3,
            tl: {
              hd: 6,
              tl: {
                hd: 9,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "transpose of a 3 x 3 board with random unofficial values");

CS17SetupGame$GameProject.checkExpect(transposeOfState(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), /* State */{
      _0: {
        TAG: /* Ongoing */1,
        _0: /* P2 */1
      },
      _1: {
        hd: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }, "transposeOfState of a random state");

CS17SetupGame$GameProject.checkExpect(stringOfStateHelper(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), " | 1 | 1 | 1 | 0 | \n | 0 | 0 | 0 | 0 | \n | 2 | 2 | 2 | 0 | \n | 1 | 2 | 1 | 0 | \n", "stringOfStateHelper of a random state");

CS17SetupGame$GameProject.checkExpect(stringOfStateHelper(transposeOfState(/* State */{
              _0: {
                TAG: /* Ongoing */1,
                _0: /* P2 */1
              },
              _1: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: {
                    hd: {
                      hd: 2,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 2,
                          tl: {
                            hd: 0,
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    tl: {
                      hd: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: {
                            hd: 1,
                            tl: {
                              hd: 0,
                              tl: /* [] */0
                            }
                          }
                        }
                      },
                      tl: /* [] */0
                    }
                  }
                }
              }
            })), " | 0 | 0 | 0 | 0 | \n | 1 | 0 | 2 | 1 | \n | 1 | 0 | 2 | 2 | \n | 1 | 0 | 2 | 1 | \n", "stringOfState of a random state");

CS17SetupGame$GameProject.checkExpect(stringOfMove(/* Move */{
          _0: 1
        }), "puts a piece in column 1", "stringOfMove of Move(1)");

CS17SetupGame$GameProject.checkExpect(stringOfMove(/* Move */{
          _0: 3
        }), "puts a piece in column 3", "stringOfMove of Move(3)");

CS17SetupGame$GameProject.checkExpect(legalMoveHelper2(/* [] */0), false, "legalMoveHelper2 of an empty list");

CS17SetupGame$GameProject.checkExpect(legalMoveHelper2({
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          }
        }), false, "legalMoveHelper2 of a full column list");

CS17SetupGame$GameProject.checkExpect(legalMoveHelper2({
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        }), true, "legalMoveHelper2 of a open column list");

CS17SetupGame$GameProject.checkExpect(legalMoveHelper(/* [] */0, 1), /* [] */0, "legalMoveHelper of an empty list");

CS17SetupGame$GameProject.checkExpect(legalMoveHelper({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, 1), /* [] */0, "legalMoveHelper of a draw board");

CS17SetupGame$GameProject.checkExpect(legalMoveHelper({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, 1), {
      hd: /* Move */{
        _0: 2
      },
      tl: {
        hd: /* Move */{
          _0: 4
        },
        tl: /* [] */0
      }
    }, "legalMoveHelper of a random board");

CS17SetupGame$GameProject.checkExpect(legalMoveHelper({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, 1), {
      hd: /* Move */{
        _0: 1
      },
      tl: {
        hd: /* Move */{
          _0: 2
        },
        tl: {
          hd: /* Move */{
            _0: 3
          },
          tl: {
            hd: /* Move */{
              _0: 4
            },
            tl: /* [] */0
          }
        }
      }
    }, "legalMoveHelper of a board with all moves being legal");

CS17SetupGame$GameProject.checkExpect(legalMoves(/* State */{
          _0: /* Draw */0,
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), /* [] */0, "legalMoves of a draw state");

CS17SetupGame$GameProject.checkExpect(legalMoves(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), {
      hd: /* Move */{
        _0: 1
      },
      tl: {
        hd: /* Move */{
          _0: 2
        },
        tl: {
          hd: /* Move */{
            _0: 3
          },
          tl: {
            hd: /* Move */{
              _0: 4
            },
            tl: /* [] */0
          }
        }
      }
    }, "legalMoves of a random state");

CS17SetupGame$GameProject.checkExpect({
      TAG: /* Win */0,
      _0: /* P1 */0
    }, {
      TAG: /* Win */0,
      _0: /* P1 */0
    }, "gameStatus of a win state");

CS17SetupGame$GameProject.checkExpect(/* Draw */0, /* Draw */0, "gameStatus of a draw state");

CS17SetupGame$GameProject.checkExpect({
      TAG: /* Ongoing */1,
      _0: /* P1 */0
    }, {
      TAG: /* Ongoing */1,
      _0: /* P1 */0
    }, "gameStatus of an ongoing state");

CS17SetupGame$GameProject.checkExpect(/* P2 */1, /* P2 */1, "otherPlayer of P1");

CS17SetupGame$GameProject.checkExpect(/* P1 */0, /* P1 */0, "otherPlayer of P2");

CS17SetupGame$GameProject.checkExpect(nextMoveColumn({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* Move */{
          _0: 2
        }), {
      hd: 0,
      tl: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 0,
            tl: /* [] */0
          }
        }
      }
    }, "nextMoveColumn of a random board and move");

CS17SetupGame$GameProject.checkExpect(nextMoveColumn({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* Move */{
          _0: 3
        }), {
      hd: 2,
      tl: {
        hd: 2,
        tl: {
          hd: 1,
          tl: {
            hd: 0,
            tl: /* [] */0
          }
        }
      }
    }, "nextMoveColumn of a random board and move");

CS17SetupGame$GameProject.checkExpect(afterColumn({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* Move */{
          _0: 1
        }), {
      hd: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: /* [] */0
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 2,
          tl: {
            hd: 2,
            tl: {
              hd: 2,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "afterColumn of a random board and Move(1)");

CS17SetupGame$GameProject.checkExpect(afterColumn({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* Move */{
          _0: 3
        }), {
      hd: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }
      },
      tl: /* [] */0
    }, "afterColumn of a random board and move");

CS17SetupGame$GameProject.checkExpect(beforeColumn({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* Move */{
          _0: 1
        }), /* [] */0, "beforeColumn of a random board and Move(1)");

CS17SetupGame$GameProject.checkExpect(beforeColumn({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* Move */{
          _0: 2
        }), {
      hd: {
        hd: 1,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 0,
              tl: /* [] */0
            }
          }
        }
      },
      tl: /* [] */0
    }, "beforeColumn of a random board and Move(2)");

CS17SetupGame$GameProject.checkExpect(beforeColumn({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* Move */{
          _0: 3
        }), {
      hd: {
        hd: 1,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 0,
              tl: /* [] */0
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        },
        tl: /* [] */0
      }
    }, "beforeColumn of a random board and move");

CS17SetupGame$GameProject.checkExpect(nextMoveP1({
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        }, /* Move */{
          _0: 1
        }), {
      hd: 1,
      tl: {
        hd: 1,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }
      }
    }, "nextMoveP1 of a random column and move");

CS17SetupGame$GameProject.checkExpect(nextMoveP1({
          hd: 2,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        }, /* Move */{
          _0: 2
        }), {
      hd: 2,
      tl: {
        hd: 1,
        tl: {
          hd: 0,
          tl: {
            hd: 0,
            tl: /* [] */0
          }
        }
      }
    }, "nextMoveP1 of a random column and move");

CS17SetupGame$GameProject.checkExpect(nextMoveP2({
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        }, /* Move */{
          _0: 1
        }), {
      hd: 1,
      tl: {
        hd: 1,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, "nextMoveP2 of a random column and move");

CS17SetupGame$GameProject.checkExpect(nextMoveP2({
          hd: 2,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        }, /* Move */{
          _0: 2
        }), {
      hd: 2,
      tl: {
        hd: 2,
        tl: {
          hd: 0,
          tl: {
            hd: 0,
            tl: /* [] */0
          }
        }
      }
    }, "nextMoveP2 of a random column and move");

CS17SetupGame$GameProject.checkExpect(combinedNextMove(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }, /* Move */{
          _0: 1
        }), {
      hd: {
        hd: 1,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 2,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: /* [] */0
          }
        }
      }
    }, "combinedNextMove of a random state and move");

CS17SetupGame$GameProject.checkExpect(combinedNextMove(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }, /* Move */{
          _0: 2
        }), {
      hd: {
        hd: 1,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 0,
              tl: /* [] */0
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 2,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: /* [] */0
          }
        }
      }
    }, "combinedNextMove of a random state and move");

CS17SetupGame$GameProject.checkExpect(findDiagonal(/* [] */0), /* [] */0, "findDiagonal of an empty list");

CS17SetupGame$GameProject.checkExpect(findDiagonal({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }
      }
    }, "the main diagonal of a random board");

CS17SetupGame$GameProject.checkExpect(findDiagonal2(/* [] */0), /* [] */0, "findDiagonal of an empty list");

CS17SetupGame$GameProject.checkExpect(findDiagonal2({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), {
      hd: {
        hd: 1,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: 2,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: /* [] */0
            },
            tl: /* [] */0
          }
        }
      }
    }, "findDiagonal2 of a random board");

CS17SetupGame$GameProject.checkExpect(allDiagonals1(/* [] */0), /* [] */0, "allDiagonals1 of an empty list");

CS17SetupGame$GameProject.checkExpect(allDiagonals1({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), {
      hd: {
        hd: 1,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: 2,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: /* [] */0
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  },
                  tl: {
                    hd: {
                      hd: 0,
                      tl: /* [] */0
                    },
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }, "allDiagonals1 of a random board");

CS17SetupGame$GameProject.checkExpect(allDiagonals2(/* [] */0), /* [] */0, "allDiagonals2 of an empty list");

CS17SetupGame$GameProject.checkExpect(allDiagonals2({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), {
      hd: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: /* [] */0
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 2,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: /* [] */0
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  },
                  tl: {
                    hd: {
                      hd: 1,
                      tl: /* [] */0
                    },
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }, "allDiagonals2 of a random board");

CS17SetupGame$GameProject.checkExpect(allDiagonal({
          hd: /* [] */0,
          tl: /* [] */0
        }), {
      hd: /* [] */0,
      tl: {
        hd: /* [] */0,
        tl: /* [] */0
      }
    }, "allDiagonal of an empty list");

CS17SetupGame$GameProject.checkExpect(allDiagonal({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), {
      hd: {
        hd: 1,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: 2,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: /* [] */0
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  },
                  tl: {
                    hd: {
                      hd: 0,
                      tl: /* [] */0
                    },
                    tl: {
                      hd: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: {
                            hd: 0,
                            tl: {
                              hd: 0,
                              tl: /* [] */0
                            }
                          }
                        }
                      },
                      tl: {
                        hd: {
                          hd: 2,
                          tl: {
                            hd: 1,
                            tl: {
                              hd: 1,
                              tl: /* [] */0
                            }
                          }
                        },
                        tl: {
                          hd: {
                            hd: 1,
                            tl: {
                              hd: 1,
                              tl: /* [] */0
                            }
                          },
                          tl: {
                            hd: {
                              hd: 1,
                              tl: /* [] */0
                            },
                            tl: {
                              hd: {
                                hd: 1,
                                tl: {
                                  hd: 2,
                                  tl: {
                                    hd: 0,
                                    tl: {
                                      hd: 0,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              },
                              tl: {
                                hd: {
                                  hd: 2,
                                  tl: {
                                    hd: 1,
                                    tl: {
                                      hd: 0,
                                      tl: /* [] */0
                                    }
                                  }
                                },
                                tl: {
                                  hd: {
                                    hd: 1,
                                    tl: {
                                      hd: 0,
                                      tl: /* [] */0
                                    }
                                  },
                                  tl: {
                                    hd: {
                                      hd: 1,
                                      tl: /* [] */0
                                    },
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, "allDiagonal of a random board");

CS17SetupGame$GameProject.checkExpect(removeDuplicate(/* [] */0), /* [] */0, "removeDuplicate of an empty list");

CS17SetupGame$GameProject.checkExpect(removeDuplicate(allDiagonal({
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: {
                    hd: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    tl: /* [] */0
                  }
                }
              }
            })), {
      hd: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: 2,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: /* [] */0
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  },
                  tl: {
                    hd: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 0,
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    tl: {
                      hd: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: {
                            hd: 0,
                            tl: /* [] */0
                          }
                        }
                      },
                      tl: {
                        hd: {
                          hd: 1,
                          tl: {
                            hd: 0,
                            tl: /* [] */0
                          }
                        },
                        tl: {
                          hd: {
                            hd: 1,
                            tl: /* [] */0
                          },
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, "removeDuplicate of a random board");

CS17SetupGame$GameProject.checkExpect(removeDuplicate(allDiagonal(/* [] */0)), /* [] */0, "allDiagonalFinal of an empty list");

CS17SetupGame$GameProject.checkExpect(removeDuplicate(allDiagonal({
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: {
                    hd: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    tl: /* [] */0
                  }
                }
              }
            })), {
      hd: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: 2,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: /* [] */0
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  },
                  tl: {
                    hd: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 0,
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    tl: {
                      hd: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: {
                            hd: 0,
                            tl: /* [] */0
                          }
                        }
                      },
                      tl: {
                        hd: {
                          hd: 1,
                          tl: {
                            hd: 0,
                            tl: /* [] */0
                          }
                        },
                        tl: {
                          hd: {
                            hd: 1,
                            tl: /* [] */0
                          },
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, "allDiagonalFinal of a random board");

CS17SetupGame$GameProject.checkExpect(check(/* [] */0), false, "check of an empty column");

CS17SetupGame$GameProject.checkExpect(check({
          hd: 2,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        }), true, "check on a column with 4 1s in a row");

CS17SetupGame$GameProject.checkExpect(check({
          hd: 2,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        }), true, "check on a column with 4 2s in a row");

CS17SetupGame$GameProject.checkExpect(List.map(check, /* [] */0), /* [] */0, "columnCheck on an empty list");

CS17SetupGame$GameProject.checkExpect(List.map(check, {
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), {
      hd: false,
      tl: {
        hd: true,
        tl: {
          hd: false,
          tl: {
            hd: false,
            tl: /* [] */0
          }
        }
      }
    }, "columnCheck on a board with a win");

CS17SetupGame$GameProject.checkExpect(List.map(check, transpose(/* [] */0)), /* [] */0, "rowCheck on an empty list");

CS17SetupGame$GameProject.checkExpect(List.map(check, transpose({
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: {
                    hd: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: {
                            hd: 0,
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    tl: /* [] */0
                  }
                }
              }
            })), {
      hd: false,
      tl: {
        hd: false,
        tl: {
          hd: true,
          tl: {
            hd: false,
            tl: /* [] */0
          }
        }
      }
    }, "columnCheck on a board with a win");

CS17SetupGame$GameProject.checkExpect(diagonalCheck(/* [] */0), /* [] */0, "diagonalCheck on an empty list");

CS17SetupGame$GameProject.checkExpect(diagonalCheck({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), {
      hd: false,
      tl: {
        hd: false,
        tl: {
          hd: true,
          tl: {
            hd: false,
            tl: {
              hd: false,
              tl: {
                hd: false,
                tl: {
                  hd: false,
                  tl: {
                    hd: false,
                    tl: {
                      hd: false,
                      tl: {
                        hd: false,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, "diagonalCheck of a board with a diagonal win");

CS17SetupGame$GameProject.checkExpect(combinedCheck(/* [] */0), /* [] */0, "combinedCheck of an empty list");

CS17SetupGame$GameProject.checkExpect(combinedCheck({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), {
      hd: false,
      tl: {
        hd: false,
        tl: {
          hd: false,
          tl: {
            hd: false,
            tl: {
              hd: false,
              tl: {
                hd: false,
                tl: {
                  hd: false,
                  tl: {
                    hd: false,
                    tl: {
                      hd: false,
                      tl: {
                        hd: false,
                        tl: {
                          hd: true,
                          tl: {
                            hd: false,
                            tl: {
                              hd: false,
                              tl: {
                                hd: false,
                                tl: {
                                  hd: false,
                                  tl: {
                                    hd: false,
                                    tl: {
                                      hd: false,
                                      tl: {
                                        hd: false,
                                        tl: /* [] */0
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, "combinedCheck of a random board with a win");

CS17SetupGame$GameProject.checkExpect(true, true, "isEmpty of an empty list");

CS17SetupGame$GameProject.checkExpect(isEmpty({
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        }), false, "isEmpty of a non-empty list");

CS17SetupGame$GameProject.checkExpect(winCheck(/* State */{
          _0: {
            TAG: /* Win */0,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), /* State */{
      _0: {
        TAG: /* Win */0,
        _0: /* P1 */0
      },
      _1: {
        hd: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }, "winCheck of a win state");

CS17SetupGame$GameProject.checkExpect(winCheck(/* State */{
          _0: /* Draw */0,
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), /* State */{
      _0: /* Draw */0,
      _1: {
        hd: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 2,
            tl: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }, "winCheck of a draw state");

CS17SetupGame$GameProject.checkExpect(winCheck(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), /* State */{
      _0: {
        TAG: /* Win */0,
        _0: /* P1 */0
      },
      _1: {
        hd: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }, "winCheck of a supposesdly ongoing state but in fact a win state");

CS17SetupGame$GameProject.checkExpect(winCheck(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), /* State */{
      _0: /* Draw */0,
      _1: {
        hd: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 2,
            tl: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }, "winCheck of a supposedly ongoing state but in fact a draw state");

CS17SetupGame$GameProject.checkExpect(winCheck(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), /* State */{
      _0: {
        TAG: /* Ongoing */1,
        _0: /* P1 */0
      },
      _1: {
        hd: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }, "winCheck on ongoing board");

CS17SetupGame$GameProject.checkExpect(nextState(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }, /* Move */{
          _0: 4
        }), /* State */{
      _0: {
        TAG: /* Win */0,
        _0: /* P1 */0
      },
      _1: {
        hd: {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }, "nextState of a state and move that ends in a win");

CS17SetupGame$GameProject.checkExpect(nextState(initialState("5 7"), /* Move */{
          _0: 4
        }), /* State */{
      _0: {
        TAG: /* Ongoing */1,
        _0: /* P2 */1
      },
      _1: {
        hd: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 0,
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  },
                  tl: {
                    hd: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 0,
                            tl: {
                              hd: 0,
                              tl: /* [] */0
                            }
                          }
                        }
                      }
                    },
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }, "nextState of the initialState and a move");

CS17SetupGame$GameProject.checkExpect(moveOfStringHelper(/* [] */0), /* [] */0, "moveOfStringHelper on empty list");

CS17SetupGame$GameProject.checkExpect(moveOfStringHelper({
          hd: /* Move */{
            _0: 1
          },
          tl: {
            hd: /* Move */{
              _0: 2
            },
            tl: {
              hd: /* Move */{
                _0: 3
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, "moveOfStringHelper on a list of moves");

CS17SetupGame$GameProject.checkExpect(moveOfString("1", /* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), /* Move */{
      _0: 1
    }, "moveOfString of valid move and state");

CS17SetupGame$GameProject.checkExpect(bothScore({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), -0.015, "bothScore of a random board");

CS17SetupGame$GameProject.checkExpect(bothScore({
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), 0.43000000000000005, "bothScore of a random board");

CS17SetupGame$GameProject.checkExpect(estimateValue(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), -0.015, "estimateValue of a random board");

CS17SetupGame$GameProject.checkExpect(estimateValue(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), 0.43000000000000005, "estimateValue of a random board");

CS17SetupGame$GameProject.checkError((function (param) {
        return nextMoveP1({
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    }
                  }, /* Move */{
                    _0: 1
                  });
      }), "The column is already full, not a legal move.");

CS17SetupGame$GameProject.checkError((function (param) {
        return combinedNextMove(/* State */{
                    _0: {
                      TAG: /* Win */0,
                      _0: /* P1 */0
                    },
                    _1: {
                      hd: {
                        hd: 1,
                        tl: {
                          hd: 1,
                          tl: {
                            hd: 1,
                            tl: {
                              hd: 1,
                              tl: /* [] */0
                            }
                          }
                        }
                      },
                      tl: {
                        hd: {
                          hd: 2,
                          tl: {
                            hd: 0,
                            tl: {
                              hd: 0,
                              tl: {
                                hd: 0,
                                tl: /* [] */0
                              }
                            }
                          }
                        },
                        tl: {
                          hd: {
                            hd: 2,
                            tl: {
                              hd: 0,
                              tl: {
                                hd: 0,
                                tl: {
                                  hd: 0,
                                  tl: /* [] */0
                                }
                              }
                            }
                          },
                          tl: {
                            hd: {
                              hd: 2,
                              tl: {
                                hd: 0,
                                tl: {
                                  hd: 0,
                                  tl: {
                                    hd: 0,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            },
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  }, /* Move */{
                    _0: 1
                  });
      }), "The game is already over.");

CS17SetupGame$GameProject.checkError((function (param) {
        return combinedNextMove(/* State */{
                    _0: /* Draw */0,
                    _1: {
                      hd: {
                        hd: 1,
                        tl: {
                          hd: 1,
                          tl: {
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: /* [] */0
                            }
                          }
                        }
                      },
                      tl: {
                        hd: {
                          hd: 2,
                          tl: {
                            hd: 2,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 1,
                                tl: /* [] */0
                              }
                            }
                          }
                        },
                        tl: {
                          hd: {
                            hd: 2,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 1,
                                  tl: /* [] */0
                                }
                              }
                            }
                          },
                          tl: {
                            hd: {
                              hd: 1,
                              tl: {
                                hd: 1,
                                tl: {
                                  hd: 1,
                                  tl: {
                                    hd: 2,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            },
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  }, /* Move */{
                    _0: 1
                  });
      }), "The game is already over.");

CS17SetupGame$GameProject.checkError((function (param) {
        return moveOfString("1", /* State */{
                    _0: {
                      TAG: /* Ongoing */1,
                      _0: /* P2 */1
                    },
                    _1: {
                      hd: {
                        hd: 1,
                        tl: {
                          hd: 1,
                          tl: {
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: /* [] */0
                            }
                          }
                        }
                      },
                      tl: {
                        hd: {
                          hd: 2,
                          tl: {
                            hd: 2,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 0,
                                tl: /* [] */0
                              }
                            }
                          }
                        },
                        tl: {
                          hd: {
                            hd: 2,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 1,
                                  tl: /* [] */0
                                }
                              }
                            }
                          },
                          tl: {
                            hd: {
                              hd: 1,
                              tl: {
                                hd: 1,
                                tl: {
                                  hd: 1,
                                  tl: {
                                    hd: 0,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            },
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  });
      }), "This column is full, please pick another column.");

exports.Connect4 = Connect4;
/*  Not a pure module */
